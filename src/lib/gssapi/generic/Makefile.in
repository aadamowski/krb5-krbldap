thisconfigdir=./..
myfulldir=lib/gssapi/generic
mydir=generic
BUILDTOP=$(REL)$(U)$(S)$(U)$(S)$(U)
LOCALINCLUDES = -I. -I$(srcdir)

##DOS##BUILDTOP = ..\..\..
##DOS##PREFIXDIR=generic
##DOS##OBJFILE=..\$(OUTPRE)generic.lst
##WIN16##LIBNAME=..\gssapi.lib

##DOS##DLL_EXP_TYPE=GSS

ETSRCS= gssapi_err_generic.c
ETOBJS= $(OUTPRE)gssapi_err_generic.$(OBJEXT)
ETHDRS= gssapi_err_generic.h

EHDRDIR= $(BUILDTOP)$(S)include$(S)gssapi

HDRS=	$(EHDRDIR)$(S)gssapi.h \
	$(EHDRDIR)$(S)gssapi_generic.h

$(EHDRDIR)$(S)gssapi.h: gssapi.h
	$(CP) gssapi.h $@
$(EHDRDIR)$(S)gssapi_generic.h: $(srcdir)$(S)gssapi_generic.h
	$(CP) $(srcdir)$(S)gssapi_generic.h $@

$(OUTPRE)gssapi_err_generic.$(OBJEXT): gssapi_err_generic.c
gssapi_err_generic.h: gssapi_err_generic.et
gssapi_err_generic.c: gssapi_err_generic.et

gssapi.h: gssapi.hin
	$(RM) $@
	echo "/* This is the gssapi.h prologue. */" >> $@
	echo "/* It contains some choice pieces of autoconf.h */" >> $@
	grep SIZEOF $(BUILDTOP)/include/krb5/autoconf.h >> $@
	grep 'HAVE_.*_H' $(BUILDTOP)/include/krb5/autoconf.h >> $@
	grep 'USE_.*_H' $(BUILDTOP)/include/krb5/autoconf.h >> $@
	echo "/* End of gssapi.h prologue. */" >> $@
	cat $(srcdir)/gssapi.hin >> $@

#if HasHashLibrary
# UTIL_VALIDATE_SRC= $(srcdir)/util_validate.c
# UTIL_VALIDATE_OBJ= util_validate.$(OBJEXT)
#else
#UTIL_VALIDATE_SRC= $(srcdir)/utl_nohash_validate.c
#UTIL_VALIDATE_OBJ= utl_nohash_validate.$(OBJEXT)
#endif

SRCS = \
	$(srcdir)/disp_com_err_status.c \
	$(srcdir)/disp_major_status.c \
	$(srcdir)/gssapi_generic.c \
	$(srcdir)/oid_ops.c \
	$(srcdir)/rel_buffer.c \
	$(srcdir)/rel_oid_set.c \
	$(srcdir)/util_buffer.c \
	$(srcdir)/util_canonhost.c \
	$(srcdir)/util_dup.c \
	$(srcdir)/util_oid.c \
	$(srcdir)/util_ordering.c \
	$(srcdir)/util_set.c \
	$(srcdir)/util_token.c \
	$(srcdir)/util_validate.c \
	gssapi_err_generic.c

OBJS = \
	$(OUTPRE)disp_com_err_status.$(OBJEXT) \
	$(OUTPRE)disp_major_status.$(OBJEXT) \
	$(OUTPRE)gssapi_generic.$(OBJEXT) \
	$(OUTPRE)oid_ops.$(OBJEXT) \
	$(OUTPRE)rel_buffer.$(OBJEXT) \
	$(OUTPRE)rel_oid_set.$(OBJEXT) \
	$(OUTPRE)util_buffer.$(OBJEXT) \
	$(OUTPRE)util_canonhost.$(OBJEXT) \
	$(OUTPRE)util_dup.$(OBJEXT) \
	$(OUTPRE)util_oid.$(OBJEXT) \
	$(OUTPRE)util_ordering.$(OBJEXT) \
	$(OUTPRE)util_set.$(OBJEXT) \
	$(OUTPRE)util_token.$(OBJEXT) \
	$(OUTPRE)util_validate.$(OBJEXT) \
	$(OUTPRE)gssapi_err_generic.$(OBJEXT)

STLIBOBJS = \
	disp_com_err_status.o \
	disp_major_status.o \
	gssapi_generic.o \
	oid_ops.o \
	rel_buffer.o \
	rel_oid_set.o \
	util_buffer.o \
	util_canonhost.o \
	util_dup.o \
	util_oid.o \
	util_ordering.o \
	util_set.o \
	util_token.o \
	util_validate.o \
	gssapi_err_generic.o

EXPORTED_HEADERS= gssapi_generic.h
EXPORTED_BUILT_HEADERS= gssapi.h

$(OBJS): $(EXPORTED_HEADERS) $(ETHDRS)

all-unix:: includes-unix
all-unix:: $(EXPORTED_HEADERS) $(ETHDRS) $(HDRS)
all-unix:: all-libobjs


##DOS##LIBOBJS = $(OBJS)

all-windows:: $(EHDRDIR) $(HDRS)

##DOS##$(EHDRDIR):
##DOS##	mkdir $(EHDRDIR)

unixmac: $(SRCS) $(ETHDRS)

clean-unix:: clean-libobjs
	$(RM) $(ETHDRS) $(ETSRCS) $(HDRS) $(EXPORTED_BUILT_HEADERS)

clean-windows::
	$(RM) $(HDRS)
	-if exist $(EHDRDIR)\nul rmdir $(EHDRDIR)

includes-unix::
	@if test -d $(EHDRDIR); then :; else (set -x; mkdir $(EHDRDIR)) fi

# Krb5InstallHeaders($(EXPORTED_HEADERS), $(KRB5_INCDIR)/krb5)
install::
	@set -x; for f in $(EXPORTED_HEADERS) ; \
	do $(INSTALL_DATA) $(srcdir)/$$f	\
		$(DESTDIR)$(KRB5_INCDIR)/gssapi/$$f ; \
	done
	@set -x; for f in $(EXPORTED_BUILT_HEADERS) ; \
	do $(INSTALL_DATA) $$f	\
		$(DESTDIR)$(KRB5_INCDIR)/gssapi/$$f ; \
	done

depend:: $(ETSRCS)

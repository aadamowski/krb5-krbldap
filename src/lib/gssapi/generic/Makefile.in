CFLAGS = $(CCOPTS) $(DEFS) -I. -I$(srcdir)

##DOSBUILDTOP = ..\..\..
##DOSLIBNAME=..\gssapi.$(LIBEXT)

all-windows:: $(OBJS)

ETSRCS= gssapi_err_generic.c
ETOBJS= gssapi_err_generic.$(OBJEXT)
ETHDRS= gssapi_err_generic.h

EHDRDIR= $(BUILDTOP)$(S)include$(S)gssapi

HDRS=	$(EHDRDIR)/gssapi.h \
	$(EHDRDIR)/gssapi_generic.h

gssapi_err_generic.$(OBJEXT): gssapi_err_generic.c

##WIN16##	$(LIBCMD) $(PAGESIZE) /nologo $(LIBNAME) -+$@;
##WIN32##	$(LIBCMD) /out:$(LIBNAME) /nologo $@

gssapi_err_generic.h: gssapi_err_generic.et

gssapi_err_generic.c: gssapi_err_generic.et

gssapi.h: gssapi.hin
	$(RM) $@
	echo "/* This is the gssapi.h prologue. */" >> $@
	echo "/* It contains some choice pieces of autoconf.h */" >> $@
	grep SIZEOF $(BUILDTOP)/include/krb5/autoconf.h >> $@
	grep 'HAVE_.*_H' $(BUILDTOP)/include/krb5/autoconf.h >> $@
	grep 'USE_.*_H' $(BUILDTOP)/include/krb5/autoconf.h >> $@
	echo "/* End of gssapi.h prologue. */"
	cat $(srcdir)/gssapi.hin >> $@

#if HasHashLibrary
# UTIL_VALIDATE_SRC= $(srcdir)/util_validate.c
# UTIL_VALIDATE_OBJ= util_validate.$(OBJEXT)
#else
#UTIL_VALIDATE_SRC= $(srcdir)/utl_nohash_validate.c
#UTIL_VALIDATE_OBJ= utl_nohash_validate.$(OBJEXT)
#endif

SRCS = \
	$(srcdir)/disp_com_err_status.c \
	$(srcdir)/disp_major_status.c \
	$(srcdir)/gssapi_generic.c \
	$(srcdir)/oid_ops.c \
	$(srcdir)/rel_buffer.c \
	$(srcdir)/rel_oid_set.c \
	$(srcdir)/util_buffer.c \
	$(srcdir)/util_canonhost.c \
	$(srcdir)/util_dup.c \
	$(srcdir)/util_oid.c \
	$(srcdir)/util_ordering.c \
	$(srcdir)/util_set.c \
	$(srcdir)/util_token.c \
	$(srcdir)/util_validate.c \
	gssapi_err_generic.c

OBJS = \
	disp_com_err_status.$(OBJEXT) \
	disp_major_status.$(OBJEXT) \
	gssapi_generic.$(OBJEXT) \
	oid_ops.$(OBJEXT) \
	rel_buffer.$(OBJEXT) \
	rel_oid_set.$(OBJEXT) \
	util_buffer.$(OBJEXT) \
	util_canonhost.$(OBJEXT) \
	util_dup.$(OBJEXT) \
	util_oid.$(OBJEXT) \
	util_ordering.$(OBJEXT) \
	util_set.$(OBJEXT) \
	util_token.$(OBJEXT) \
	util_validate.$(OBJEXT) \
	gssapi_err_generic.$(OBJEXT)

STLIBOBJS = \
	disp_com_err_status.o \
	disp_major_status.o \
	gssapi_generic.o \
	oid_ops.o \
	rel_buffer.o \
	rel_oid_set.o \
	util_buffer.o \
	util_canonhost.o \
	util_dup.o \
	util_oid.o \
	util_ordering.o \
	util_set.o \
	util_token.o \
	util_validate.o \
	gssapi_err_generic.o

EXPORTED_HEADERS= gssapi_generic.h
EXPORTED_BUILT_HEADERS= gssapi.h

all-unix:: $(ETHDRS) $(HDRS)
all-unix:: all-libobjs

all-windows:: $(SRCS) $(ETHDRS) win-include
all-windows:: $(OBJS)

win-include::
	if not exist $(EHDRDIR)\nul mkdir $(EHDRDIR)
	copy gssapi.h $(EHDRDIR)
	copy gssapi_generic.h $(EHDRDIR)

unixmac: $(SRCS) $(ETHDRS)

clean-unix:: clean-libobjs
	$(RM) $(ETHDRS) $(ETSRCS) $(HDRS)

clean-windows::
	$(RM) $(EHDRDIR)\gssapi.h $(EHDRDIR)\gssapi_generic.h
	if exist $(EHDRDIR)\nul rmdir $(EHDRDIR)

# Krb5InstallHeaders($(EXPORTED_HEADERS), $(KRB5_INCDIR)/krb5)
install::
	@set -x; for f in $(EXPORTED_HEADERS) ; \
	do $(INSTALL_DATA) $(srcdir)/$$f	\
		$(DESTDIR)$(KRB5_INCDIR)/gssapi/$$f ; \
	done
	@set -x; for f in $(EXPORTED_BUILT_HEADERS) ; \
	do $(INSTALL_DATA) $$f	\
		$(DESTDIR)$(KRB5_INCDIR)/gssapi/$$f ; \
	done

depend:: $(ETSRCS)

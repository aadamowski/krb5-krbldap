CFLAGS = $(CCOPTS) $(DEFS) -I. -I$(srcdir) -DUSE_AUTOCONF_H

##DOSBUILDTOP = ..\..\..
##DOSLIBNAME=..\gssapi.$(LIBEXT)

.c.o:
	$(CC) $(CFLAGS) -c $(srcdir)/$*.c
@SHARED_RULE@

all-unix:: shared $(OBJS)

all-mac:: shared $(OBJS)

all-windows:: $(OBJS)

shared:
	mkdir shared

ETSRCS= gssapi_err_generic.c
ETOBJS= gssapi_err_generic.$(OBJEXT)
ETHDRS= gssapi_err_generic.h

gssapi_err_generic.$(OBJEXT): gssapi_err_generic.c
	$(CC) $(CFLAGS) -c $*.c
@SHARED_RULE_LOCAL@
##WIN16##	$(LIBCMD) $(PAGESIZE) /nologo $(LIBNAME) -+$@;
##WIN32##	$(LIBCMD) /out:$(LIBNAME) /nologo $@

gssapi_err_generic.h: gssapi_err_generic.et

gssapi_err_generic.c: gssapi_err_generic.et

#if HasHashLibrary
# UTIL_VALIDATE_SRC= $(srcdir)/util_validate.c
# UTIL_VALIDATE_OBJ= util_validate.$(OBJEXT)
#else
#UTIL_VALIDATE_SRC= $(srcdir)/utl_nohash_validate.c
#UTIL_VALIDATE_OBJ= utl_nohash_validate.$(OBJEXT)
#endif

SRCS = \
	$(srcdir)/disp_com_err_status.c \
	$(srcdir)/disp_major_status.c \
	$(srcdir)/gssapi_generic.c \
	$(srcdir)/oid_ops.c \
	$(srcdir)/release_buffer.c \
	$(srcdir)/release_oid_set.c \
	$(srcdir)/util_buffer.c \
	$(srcdir)/util_canonhost.c \
	$(srcdir)/util_dup.c \
	$(srcdir)/util_oid.c \
	$(srcdir)/util_ordering.c \
	$(srcdir)/util_set.c \
	$(srcdir)/util_token.c \
	$(srcdir)/util_validate.c \
	gssapi_err_generic.c

OBJS = \
	disp_com_err_status.$(OBJEXT) \
	disp_major_status.$(OBJEXT) \
	gssapi_generic.$(OBJEXT) \
	oid_ops.$(OBJEXT) \
	release_buffer.$(OBJEXT) \
	release_oid_set.$(OBJEXT) \
	util_buffer.$(OBJEXT) \
	util_canonhost.$(OBJEXT) \
	util_dup.$(OBJEXT) \
	util_oid.$(OBJEXT) \
	util_ordering.$(OBJEXT) \
	util_set.$(OBJEXT) \
	util_token.$(OBJEXT) \
	util_validate.$(OBJEXT) \
	gssapi_err_generic.$(OBJEXT)

EHDRDIR= $(BUILDTOP)/include/gssapi
EXPORTED_HEADERS= gssapi.h gssapi_generic.h

HDRS= $(ETHDRS)

all-unix:: $(SRCS) $(HDRS) includes $(OBJS)

all-mac:: $(SRCS) $(HDRS) includes $(OBJS)

all-windows:: $(SRCS) $(HDRS) includes $(OBJS)
	if not exist $(EHDRDIR)\nul mkdir $(EHDRDIR)
	copy gssapi.h $(EHDRDIR)
	copy gssapi_generic.h $(EHDRDIR)

unixmac: $(SRCS) $(HDRS) includes

clean-unix::
	$(RM) $(ETHDRS) $(ETSRCS) shared/*

clean-mac::
	$(RM) $(ETHDRS) $(ETSRCS) shared/*

clean-windows::
	$(RM) $(EHDRDIR)\gssapi.h $(EHDRDIR)\gssapi_generic.h
	if exist $(EHDRDIR)\nul rmdir $(EHDRDIR)

# Krb5InstallHeaders($(EXPORTED_HEADERS), $(KRB5_INCDIR)/krb5)
install::
	@set -x; for f in $(EXPORTED_HEADERS) ; \
	do $(INSTALL_DATA) $(srcdir)/$$f	\
		$(DESTDIR)$(KRB5_INCDIR)/gssapi/$$f ; \
	done

depend:: $(ETSRCS)

includes::

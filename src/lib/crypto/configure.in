AC_INIT(configure.in)
CONFIG_RULES
CONFIG_DIRS(des crc32 md4 md5 sha os)
AC_PROG_ARCHIVE
AC_PROG_ARCHIVE_ADD
AC_PROG_RANLIB
AC_PROG_INSTALL
dnl
dnl Determine which cryptosystems we are enabling
dnl
AC_ARG_ENABLE([des-cbc-md5],
[ --enable-des-cbc-md5		enable DES_CBC_MD5 (DEFAULT).
 --disable-des-cbc-md5		disable DES_CBC_MD5.],
,
enableval=yes)dnl
if test "$enableval" = yes; then
	AC_MSG_RESULT(Enabling DES_CBC_MD5)
	AC_DEFINE(PROVIDE_DES_CBC_MD5)
else
	AC_MSG_RESULT(Disabling DES_CBC_MD5)
fi
AC_ARG_ENABLE([des3-cbc-sha],
[ --enable-des3-cbc-sha		enable DES3_CBC_SHA (DEFAULT).
 --disable-des3-cbc-sha		disable DES3_CBC_SHA.],
,
enableval=yes)dnl
if test "$enableval" = yes; then
	AC_MSG_RESULT(Enabling DES3_CBC_SHA)
	AC_DEFINE(PROVIDE_DES3_CBC_SHA)
else
	AC_MSG_RESULT(Disabling DES3_CBC_SHA)
fi
AC_ARG_WITH([des-cbc-crc],
[ --enable-des-cbc-crc		enable DES_CBC_CRC (DEFAULT).
 --disable-des-cbc-crc		disable DES_CBC_CRC.],
,
enableval=yes)dnl
if test "$enableval" = yes; then
	AC_MSG_RESULT(Enabling DES_CBC_CRC)
	AC_DEFINE(PROVIDE_DES_CBC_CRC)
else
	AC_MSG_RESULT(Disabling DES_CBC_CRC)
fi
AC_ARG_WITH([des-cbc-raw],
[ --enable-des-cbc-raw		enable DES_CBC_RAW (DEFAULT).
 --disable-des-cbc-raw		disable DES_CBC_RAW.],
,
enableval=yes)dnl
if test "$enableval" = yes; then
	AC_MSG_RESULT(Enabling DES_CBC_RAW)
	AC_DEFINE(PROVIDE_DES_CBC_RAW)
else
	AC_MSG_RESULT(Disabling DES_CBC_RAW)
fi
AC_ARG_WITH([des3-cbc-raw],
[ --enable-des3-cbc-raw		enable DES3_CBC_RAW (DEFAULT).
 --disable-des3-cbc-raw		disable DES3_CBC_RAW.],
,
enableval=yes)dnl
if test "$enableval" = yes; then
	AC_MSG_RESULT(Enabling DES3_CBC_RAW)
	AC_DEFINE(PROVIDE_DES3_CBC_RAW)
else
	AC_MSG_RESULT(Disabling DES3_CBC_RAW)
fi
AC_ARG_WITH([des-cbc-cksum],
[ --enable-des-cbc-cksum		enable DES_CBC_CKSUM (DEFAULT).
 --disable-des-cbc-cksum	disable DES_CBC_CKSUM.],
,
enableval=yes)dnl
if test "$enableval" = yes; then
	AC_MSG_RESULT(Enabling DES_CBC_CKSUM)
	AC_DEFINE(PROVIDE_DES_CBC_CKSUM)
else
	AC_MSG_RESULT(Disabling DES_CBC_CKSUM)
fi
AC_ARG_WITH([crc32],
[ --enable-crc32			enable CRC32 (DEFAULT).
 --disable-crc32		disable CRC32.],
,
enableval=yes)dnl
if test "$enableval" = yes; then
	AC_MSG_RESULT(Enabling CRC32)
	AC_DEFINE(PROVIDE_CRC32)
else
	AC_MSG_RESULT(Disabling CRC32)
fi
AC_ARG_WITH([rsa-md4],
[ --enable-rsa-md4		enable RSA_MD4 (DEFAULT).
 --disable-rsa-md4		disable RSA_MD4.],
,
enableval=yes)dnl
if test "$enableval" = yes; then
	AC_MSG_RESULT(Enabling RSA_MD4)
	AC_DEFINE(PROVIDE_RSA_MD4)
else
	AC_MSG_RESULT(Disabling RSA_MD4)
fi
AC_ARG_WITH([rsa-md5],
[ --enable-rsa-md5		enable RSA_MD5 (DEFAULT).
 --disable-rsa-md5		disable RSA_MD5.],
,
enableval=yes)dnl
if test "$enableval" = yes; then
	AC_MSG_RESULT(Enabling RSA_MD5)
	AC_DEFINE(PROVIDE_RSA_MD5)
else
	AC_MSG_RESULT(Disabling RSA_MD5)
fi
AC_ARG_WITH([nist-sha],
[ --enable-nist-sha		enable NIST_SHA (DEFAULT).
 --disable-nist-sha		disable NIST_SHA.],
,
enableval=yes)dnl
if test "$enableval" = yes; then
	AC_MSG_RESULT(Enabling NIST_SHA)
	AC_DEFINE(PROVIDE_NIST_SHA)
else
	AC_MSG_RESULT(Disabling NIST_SHA)
fi

V5_SHARED_LIB_OBJS
SubdirLibraryRule([${OBJS}])
DO_SUBDIRS
V5_MAKE_SHARED_LIB(libcrypto,1.0,.., ./crypto)
V5_AC_OUTPUT_MAKEFILE

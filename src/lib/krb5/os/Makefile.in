CFLAGS = $(CCOPTS) $(DEFS)
KRB5_RUN_ENV = @KRB5_RUN_ENV@

##DOSBUILDTOP = ..\..\..
##DOSDBFLAGS=
##DOSMYNAME=os
##DOSOBJFILE=..\$(MYNAME).lst
##WIN16##LIBNAME=..\krb5.lib

.c.o:
	$(CC) $(CFLAGS) -c $(srcdir)/$*.c
@SHARED_RULE@

OBJS= \
	an_to_ln.$(OBJEXT)	\
	def_realm.$(OBJEXT)	\
	DNR.$(OBJEXT)	\
	ccdefname.$(OBJEXT)	\
	free_krbhs.$(OBJEXT)	\
	free_hstrl.$(OBJEXT)	\
	full_ipadr.$(OBJEXT)	\
	get_krbhst.$(OBJEXT)	\
	gen_port.$(OBJEXT)	\
	genaddrs.$(OBJEXT)	\
	gen_rname.$(OBJEXT)	\
	gmt_mktime.$(OBJEXT)	\
	hostaddr.$(OBJEXT)	\
	hst_realm.$(OBJEXT)	\
	init_os_ctx.$(OBJEXT)	\
	krbfileio.$(OBJEXT)	\
	ktdefname.$(OBJEXT)	\
	kuserok.$(OBJEXT)	\
	mk_faddr.$(OBJEXT)	\
	localaddr.$(OBJEXT)	\
	locate_kdc.$(OBJEXT)	\
	lock_file.$(OBJEXT)	\
	macsock.$(OBJEXT)	\
	net_read.$(OBJEXT)	\
	net_write.$(OBJEXT)	\
	osconfig.$(OBJEXT)	\
	port2ip.$(OBJEXT)	\
	promptusr.$(OBJEXT)	\
	read_msg.$(OBJEXT)	\
	read_pwd.$(OBJEXT)	\
	realm_dom.$(OBJEXT)	\
	sendto_kdc.$(OBJEXT)	\
	sn2princ.$(OBJEXT)	\
	timeofday.$(OBJEXT)	\
	toffset.$(OBJEXT)	\
	unlck_file.$(OBJEXT)	\
	ustime.$(OBJEXT)	\
	write_msg.$(OBJEXT)

SRCS= \
	$(srcdir)/an_to_ln.c	\
	$(srcdir)/def_realm.c	\
	$(srcdir)/DNR.c	\
	$(srcdir)/ccdefname.c	\
	$(srcdir)/free_krbhs.c	\
	$(srcdir)/free_hstrl.c	\
	$(srcdir)/full_ipadr.c	\
	$(srcdir)/get_krbhst.c	\
	$(srcdir)/gen_port.c	\
	$(srcdir)/genaddrs.c	\
	$(srcdir)/gen_rname.c	\
	$(srcdir)/gmt_mktime.c	\
	$(srcdir)/hostaddr.c	\
	$(srcdir)/hst_realm.c	\
	$(srcdir)/init_os_ctx.c	\
	$(srcdir)/krbfileio.c	\
	$(srcdir)/ktdefname.c	\
	$(srcdir)/kuserok.c	\
	$(srcdir)/mk_faddr.c	\
	$(srcdir)/localaddr.c	\
	$(srcdir)/locate_kdc.c	\
	$(srcdir)/lock_file.c	\
	$(srcdir)/macsock.c	\
	$(srcdir)/net_read.c	\
	$(srcdir)/net_write.c	\
	$(srcdir)/osconfig.c	\
	$(srcdir)/promptusr.c	\
	$(srcdir)/read_msg.c	\
	$(srcdir)/read_pwd.c	\
	$(srcdir)/realm_dom.c	\
	$(srcdir)/port2ip.c	\
	$(srcdir)/sendto_kdc.c	\
	$(srcdir)/sn2princ.c	\
	$(srcdir)/timeofday.c	\
	$(srcdir)/toffset.c	\
	$(srcdir)/unlck_file.c	\
	$(srcdir)/ustime.c	\
	$(srcdir)/write_msg.c

all-unix:: shared $(OBJS)
all-mac:: $(OBJS)
all-windows:: $(OBJFILE)

##DOS$(OBJFILE): $(OBJS)
##DOS	$(RM) $(OBJFILE)
##WIN16##	$(CP) nul: $(OBJFILE)
##WIN32##	$(LIBECHO) -p $(MYNAME)\ *.obj > $(OBJFILE)

shared:
	mkdir shared

TEST_PROGS= t_std_conf t_an_to_ln

T_STD_CONF_OBJS= t_std_conf.o def_realm.o get_krbhst.o realm_dom.o \
		hst_realm.o init_os_ctx.o locate_kdc.o 

T_AN_TO_LN_OBJS = t_an_to_ln.o an_to_ln.o 

t_std_conf: $(T_STD_CONF_OBJS) $(DEPLIBS)
	$(LD) $(LDFLAGS) $(LDARGS) -o t_std_conf $(T_STD_CONF_OBJS) $(LIBS)

t_an_to_ln: $(T_AN_TO_LN_OBJS) $(DEPLIBS)
	$(LD) $(LDFLAGS) $(LDARGS) -o t_an_to_ln $(T_AN_TO_LN_OBJS) $(LIBS)

check-unix:: $(TEST_PROGS)
	KRB5_CONFIG=$(srcdir)/td_krb5.conf ; export KRB5_CONFIG ;\
	$(KRB5_RUN_ENV) ./t_std_conf  -d -s NEW.DEFAULT.REALM -d \
		-k IGGY.ORG -k DEFAULT_REALM.TST \
		-D DEFAULT_REALM.TST -r bad.idea -r itar.bad.idea \
		-r really.BAD.IDEA. -r clipper.bad.idea -r KeYEsCrOW.BaD.IDea \
		-r pgp.good.idea -r no_domain > test.out
	cmp test.out $(srcdir)/ref_std_conf.out
	$(RM) test.out

#
# Do some aname-to-lname testing.
#
check-unix::
	echo '[libdefaults]' > ./t_an.conf
	echo '	default_realm = r' >> ./t_an.conf
	echo '[realms]' >> ./t_an.conf
	echo 'r = {' >> ./t_an.conf
#	if test -r ../../../admin/aname/kdb5_anadd ; then \
#		$(KRB5_RUN_ENV) ../../../admin/aname/kdb5_anadd -a -n ./t_an p/i/i/i@r piii; \
#		../../../admin/aname/kdb5_anadd -a -n ./t_an p/a/b/c@r pabc; \
#		echo 'auth_to_local = DB:./t_an' >> ./t_an.conf; \
#	fi
	echo 'auth_to_local = RULE:[3:$$1$$3$$2](rule.*)s/rule//g' \
		>> ./t_an.conf
	echo 'auth_to_local = DEFAULT' >> ./t_an.conf
	echo '}' >> ./t_an.conf
#	if test -r ../../../admin/aname/kdb5_anadd ; then \
#		KRB5_CONFIG=./t_an.conf ; export KRB5_CONFIG ; \
#		$(KRB5_RUN_ENV) ./t_an_to_ln p/i/i/i@r p/a/b/c@r; \
#	fi
	KRB5_CONFIG=./t_an.conf ; export KRB5_CONFIG ; \
	$(KRB5_RUN_ENV) ./t_an_to_ln rul/helpme/e@r ru/123/le@r
	KRB5_CONFIG=./t_an.conf ; export KRB5_CONFIG ; \
	$(KRB5_RUN_ENV) ./t_an_to_ln fred/r@r barney/r@r
	$(RM) ./t_an.*

clean:: 
	$(RM) $(TEST_PROGS) test.out t_std_conf.o t_an_to_ln.o

clean-unix::
	$(RM) shared/*
clean-mac::
clean-windows::
	$(RM) $(OBJFILE)
